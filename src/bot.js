import TelegramBot from 'node-telegram-bot-api';
import fs from 'fs/promises';
import path from 'path';
import { buildTradingViewUrl, normalizeSymbol } from './tradingview-url-builder.js';
// –£–±–∏—Ä–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
import { parseTimeframe, getTimeframeDescription, getPopularTimeframes, TIMEFRAME_PRESETS } from './tradingview-timeframes.js';

const DATA_FILE = 'data/urls.json';

class SignalBot {
    constructor(token) {
        this.bot = new TelegramBot(token, { polling: true });
        this.adminChatId = null;
        this.setupCommands();
        this.initDataFile();
    }

    async initDataFile() {
        try {
            await fs.mkdir('data', { recursive: true });
            try {
                await fs.access(DATA_FILE);
            } catch {
                await fs.writeFile(DATA_FILE, JSON.stringify({ urls: [], adminChatId: null }));
            }
        } catch (error) {
            console.error('Error initializing data file:', error);
        }
    }

    async loadData() {
        try {
            const data = await fs.readFile(DATA_FILE, 'utf8');
            return JSON.parse(data);
        } catch {
            return { urls: [], adminChatId: null };
        }
    }

    async saveData(data) {
        try {
            await fs.writeFile(DATA_FILE, JSON.stringify(data, null, 2));
        } catch (error) {
            console.error('Error saving data:', error);
        }
    }

    setupCommands() {
        this.bot.onText(/\/start/, async (msg) => {
            const chatId = msg.chat.id;
            const data = await this.loadData();
            
            if (!data.adminChatId) {
                data.adminChatId = chatId;
                await this.saveData(data);
                this.adminChatId = chatId;
            }

            const welcomeMessage = `
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Signal Fox Bot! ü¶ä

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/symbol <–∫–æ–¥> [—Ç–∞–π–º—Ñ—Ä–µ–π–º] - —Å–æ–∑–¥–∞—Ç—å TradingView URL
/add <url> - –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/test <url> - —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
/timeframes - —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
/indicators - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
/help - –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

–ü—Ä–∏–º–µ—Ä: /symbol SBER 1h
            `;
            
            this.bot.sendMessage(chatId, welcomeMessage);
        });

        this.bot.onText(/\/add (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;
            const url = match[1].trim();

            if (!this.isValidUrl(url)) {
                this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL');
                return;
            }

            const data = await this.loadData();
            const urlId = Date.now().toString();
            data.urls.push({ id: urlId, url, addedAt: new Date().toISOString() });
            await this.saveData(data);

            this.bot.sendMessage(chatId, `‚úÖ URL –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: ${urlId}\\n${url}`);
        });

        this.bot.onText(/\/remove (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;
            const urlId = match[1].trim();

            const data = await this.loadData();
            const initialLength = data.urls.length;
            data.urls = data.urls.filter(item => item.id !== urlId);

            if (data.urls.length < initialLength) {
                await this.saveData(data);
                this.bot.sendMessage(chatId, `‚úÖ URL —Å ID ${urlId} —É–¥–∞–ª–µ–Ω`);
            } else {
                this.bot.sendMessage(chatId, `‚ùå URL —Å ID ${urlId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });

        this.bot.onText(/\/list/, async (msg) => {
            const chatId = msg.chat.id;
            const data = await this.loadData();

            if (data.urls.length === 0) {
                this.bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ URL –ø—É—Å—Ç');
                return;
            }

            let message = '–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö URL:\\n\\n';
            data.urls.forEach((item, index) => {
                message += `${index + 1}. ID: ${item.id}\\n${item.url}\\n\\n`;
            });

            this.bot.sendMessage(chatId, message);
        });

        this.bot.onText(/\/test (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;
            const url = match[1].trim();

            if (!this.isValidUrl(url)) {
                this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL');
                return;
            }

            this.bot.sendMessage(chatId, 'üì∏ –î–µ–ª–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç...');
            
            try {
                const { takeScreenshot } = await import('./screenshot.js');
                const result = await takeScreenshot(url);
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                let screenshotPath, instrumentName, originalUrl;
                if (typeof result === 'string') {
                    // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ –ø—É—Ç—å
                    screenshotPath = result;
                    instrumentName = 'Unknown';
                    originalUrl = url;
                } else {
                    // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
                    screenshotPath = result.path;
                    instrumentName = result.instrumentName || 'Unknown';
                    originalUrl = result.url || url;
                }
                
                await this.bot.sendPhoto(chatId, screenshotPath, {
                    caption: `üìà ${instrumentName}\n\nüîó ${originalUrl}`
                });
                
                await fs.unlink(screenshotPath);
            } catch (error) {
                console.error('Screenshot error:', error);
                this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${error.message}`);
            }
        });

        this.bot.onText(/\/symbol (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;
            const input = match[1].trim();
            
            try {
                // –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Å–∏–º–≤–æ–ª –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º
                // –§–æ—Ä–º–∞—Ç—ã: "SBER", "SBER 1h", "SBER,1h", "SBER-1h"
                const parts = input.split(/[\s,\-]+/);
                const symbol = parts[0].toUpperCase();
                const timeframeInput = parts[1] || '1d';
                
                const normalizedSymbol = normalizeSymbol(symbol);
                const timeframe = parseTimeframe(timeframeInput);
                const timeframeDesc = getTimeframeDescription(timeframeInput);
                
                // –°–æ–∑–¥–∞–µ–º URL —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º
                const basicUrl = buildTradingViewUrl(normalizedSymbol, timeframe);
                
                const message = `üìä ${symbol} (${timeframeDesc})

${basicUrl}

–ü—Ä–∏–º–µ—Ä—ã: /symbol SBER 1h, /symbol GAZP 15m
–ö–æ–º–∞–Ω–¥—ã: /add <url>, /test <url>, /timeframes`;
                
                this.bot.sendMessage(chatId, message);
            } catch (error) {
                this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è URL: ${error.message}`);
            }
        });

        this.bot.onText(/\/timeframes/, (msg) => {
            const chatId = msg.chat.id;
            const popularTimeframes = getPopularTimeframes();
            
            const timeframesList = popularTimeframes.map(tf => {
                return `‚è∞ ${tf.code} - ${tf.description}`;
            }).join('\n');
            
            const strategiesInfo = Object.entries(TIMEFRAME_PRESETS).map(([strategy, timeframes]) => {
                return `üìä ${strategy}: ${timeframes.join(', ')}`;
            }).join('\n');
            
            const message = `‚è∞ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:

${timeframesList}

üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º:

${strategiesInfo}

üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/symbol SBER 1h - –°–±–µ—Ä –Ω–∞ —á–∞—Å–æ–≤–æ–º –≥—Ä–∞—Ñ–∏–∫–µ
/symbol GAZP 15m - –ì–∞–∑–ø—Ä–æ–º –Ω–∞ 15-–º–∏–Ω—É—Ç–Ω–æ–º
/symbol LKOH 1d - –õ—É–∫–æ–π–ª –Ω–∞ –¥–Ω–µ–≤–Ω–æ–º`;
            
            this.bot.sendMessage(chatId, message);
        });

        this.bot.onText(/\/indicators/, (msg) => {
            const chatId = msg.chat.id;
            const presetsInfo = Object.entries(INDICATOR_PRESETS).map(([name, indicators]) => {
                return `üìä ${name}: ${indicators.join(', ')}`;
            }).join('\n');
            
            const message = `üìà –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:

${presetsInfo}

üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /symbol <–∫–æ–¥> [—Ç–∞–π–º—Ñ—Ä–µ–π–º] –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL

üí° –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ TradingView, –Ω–æ URL –±—É–¥–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.`;
            
            this.bot.sendMessage(chatId, message);
        });

        this.bot.onText(/\/help/, (msg) => {
            const chatId = msg.chat.id;
            const helpMessage = `
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/add <url> - –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/remove <id> - —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ ID
/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏
/test <url> - —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
/symbol <–∫–æ–¥> [—Ç–∞–π–º—Ñ—Ä–µ–π–º] - —Å–æ–∑–¥–∞—Ç—å TradingView URL
/timeframes - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
/indicators - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
/symbol SBER - –°–±–µ—Ä –Ω–∞ –¥–Ω–µ–≤–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ
/symbol SBER 1h - –°–±–µ—Ä –Ω–∞ —á–∞—Å–æ–≤–æ–º –≥—Ä–∞—Ñ–∏–∫–µ
/symbol GAZP 15m - –ì–∞–∑–ø—Ä–æ–º –Ω–∞ 15-–º–∏–Ω—É—Ç–Ω–æ–º
/timeframes - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
/indicators - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            `;
            
            this.bot.sendMessage(chatId, helpMessage);
        });
    }

    isValidUrl(string) {
        try {
            new URL(string);
            return true;
        } catch {
            return false;
        }
    }

    async sendScreenshotToAdmin(url, screenshotPath, instrumentName = 'Unknown') {
        const data = await this.loadData();
        if (data.adminChatId) {
            try {
                await this.bot.sendPhoto(data.adminChatId, screenshotPath, {
                    caption: `üìà ${instrumentName}\n\nüîó ${url}`
                });
            } catch (error) {
                console.error('Error sending screenshot to admin:', error);
            }
        }
    }
}

export default SignalBot;