import { chromium, firefox } from 'playwright';
import path from 'path';
import fs from 'fs/promises';
import { autoLogin, loadAuthCookies } from './tradingview-auth.js';

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç cookies –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç Playwright
 */
async function loadCookies() {
    try {
        const cookiesPath = path.join('data', 'cookies.json');
        const cookiesData = await fs.readFile(cookiesPath, 'utf8');
        const rawCookies = JSON.parse(cookiesData);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º cookies –≤ —Ñ–æ—Ä–º–∞—Ç Playwright
        const cookies = rawCookies
            .filter(cookie => cookie.name && cookie.value) // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ cookies
            .map(cookie => {
                const playwrightCookie = {
                    name: cookie.name,
                    value: cookie.value,
                    domain: cookie.domain,
                    path: cookie.path || '/',
                    httpOnly: cookie.httpOnly || false,
                    secure: cookie.secure || false,
                    sameSite: convertSameSite(cookie.sameSite)
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º expires —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö cookies
                if (cookie.expirationDate && !cookie.session) {
                    playwrightCookie.expires = Math.floor(cookie.expirationDate);
                }
                
                return playwrightCookie;
            });
        
        console.log(`üç™ Loaded and converted ${cookies.length} cookies from file`);
        return cookies;
    } catch (error) {
        console.log('‚ö†Ô∏è  No cookies file found, proceeding without authorization');
        return null;
    }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç sameSite –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Chrome —Ñ–æ—Ä–º–∞—Ç–∞ –≤ Playwright —Ñ–æ—Ä–º–∞—Ç
 */
function convertSameSite(sameSite) {
    switch (sameSite) {
        case 'no_restriction':
            return 'None';
        case 'lax':
            return 'Lax';
        case 'strict':
            return 'Strict';
        default:
            return 'Lax'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–º–≤–æ–ª –∏–∑ URL TradingView
 */
function extractSymbolFromUrl(url) {
    try {
        const urlObj = new URL(url);
        const symbolParam = urlObj.searchParams.get('symbol');
        if (symbolParam) {
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä RUS%3ASMLT -> RUS:SMLT)
            return decodeURIComponent(symbolParam);
        }
        return null;
    } catch (error) {
        console.error('Error extracting symbol from URL:', error);
        return null;
    }
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ TradingView
 */
export async function takeEnhancedTradingViewScreenshot(url) {
    let browser = null;
    
    try {
        console.log(`üìä Enhanced TradingView screenshot: ${url}`);
        
        const expectedSymbol = extractSymbolFromUrl(url);
        console.log(`üéØ Expected symbol: ${expectedSymbol || 'Unknown'}`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        try {
            browser = await firefox.launch({
                headless: true,  // –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
                timeout: 30000
            });
            console.log('ü¶ä Using Firefox browser');
        } catch (firefoxError) {
            browser = await chromium.launch({
                headless: true,  // –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
                timeout: 30000,
                args: ['--no-sandbox', '--disable-web-security']
            });
            console.log('üåê Using Chromium browser');
        }

        const page = await browser.newPage();
        await page.setViewportSize({ width: 1920, height: 1080 });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User Agent –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try {
            await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
        } catch (uaError) {
            console.log('User agent not supported by this browser');
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è - —Å–Ω–∞—á–∞–ª–∞ cookies, –ø–æ—Ç–æ–º –∞–≤—Ç–æ–ª–æ–≥–∏–Ω
        let isAuthorized = false;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ auth cookies
        const authCookies = await loadAuthCookies();
        if (authCookies) {
            try {
                await page.context().addCookies(authCookies);
                console.log('üç™ Auth cookies loaded successfully');
                isAuthorized = true;
            } catch (cookieError) {
                console.warn('‚ö†Ô∏è  Failed to load auth cookies:', cookieError.message);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö cookies, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–µ cookies
        if (!isAuthorized) {
            const cookies = await loadCookies();
            if (cookies) {
                try {
                    await page.context().addCookies(cookies);
                    console.log('üç™ Old cookies loaded successfully');
                    isAuthorized = true;
                } catch (cookieError) {
                    console.warn('‚ö†Ô∏è  Failed to load old cookies:', cookieError.message);
                }
            }
        }
        
        // –ï—Å–ª–∏ cookies –Ω–µ –ø–æ–º–æ–≥–ª–∏, –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥–∏–Ω
        if (!isAuthorized) {
            console.log('üîë Starting automatic login...');
            const loginSuccess = await autoLogin(page);
            if (loginSuccess) {
                isAuthorized = true;
                console.log('‚úÖ Automatic login completed');
            } else {
                console.warn('‚ö†Ô∏è  Automatic login failed, continuing without auth');
            }
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await page.goto(url, { 
            waitUntil: 'domcontentloaded',
            timeout: 30000 
        });

        console.log('‚è≥ Waiting for initial page load...');
        await page.waitForTimeout(2000); // –£–º–µ–Ω—å—à–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
        
        // –ë–´–°–¢–†–´–ô –°–ö–†–ò–ù–®–û–¢ –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        console.log('üì∏ Taking quick screenshot before modals appear...');
        
        // –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≥—Ä–∞—Ñ–∏–∫–∞
        try {
            await page.waitForSelector('.chart-container', { timeout: 8000 });
            console.log('‚úÖ Chart container found');
        } catch (error) {
            console.log('‚ö†Ô∏è  Chart container not found, continuing...');
        }
        
        // –ï—â–µ –Ω–µ–º–Ω–æ–≥–æ –∂–¥–µ–º –¥–ª—è –ø—Ä–æ—Ä–∏—Å–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        await page.waitForTimeout(3000);
        
        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –°–†–ê–ó–£
        await fs.mkdir('screenshots', { recursive: true });
        
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = `enhanced-screenshot-${timestamp}.png`;
        const screenshotPath = path.join('screenshots', filename);

        await page.screenshot({ 
            path: screenshotPath,
            fullPage: false,
            type: 'png'
        });

        console.log(`üì∏ Quick screenshot saved: ${screenshotPath}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        let instrumentName = 'Unknown';
        try {
            const titleElement = await page.$('[data-name="legend-source-title"]');
            if (titleElement) {
                instrumentName = await titleElement.textContent();
                console.log(`üìà Instrument: ${instrumentName}`);
            }
        } catch (error) {
            console.log('‚ö†Ô∏è  Could not get instrument name');
        }
        
        return {
            path: screenshotPath,
            instrumentName: instrumentName,
            url: url,
            success: true
        };

    } catch (error) {
        console.error('‚ùå Enhanced screenshot failed:', error.message);
        throw error;
    } finally {
        if (browser) {
            try {
                await browser.close();
            } catch (closeError) {
                console.warn('Error closing browser:', closeError.message);
            }
        }
    }
}